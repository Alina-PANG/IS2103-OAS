
package ws.client;

import java.math.BigDecimal;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ProxyWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ProxyWebService {


    /**
     * 
     * @param c
     * @return
     *     returns ws.client.CustomerEntity
     * @throws GeneralException_Exception
     * @throws CustomerAlreadyExistException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createNewCustomerEntity", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CreateNewCustomerEntity")
    @ResponseWrapper(localName = "createNewCustomerEntityResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CreateNewCustomerEntityResponse")
    @Action(input = "http://ws.session.ejb/ProxyWebService/createNewCustomerEntityRequest", output = "http://ws.session.ejb/ProxyWebService/createNewCustomerEntityResponse", fault = {
        @FaultAction(className = CustomerAlreadyExistException_Exception.class, value = "http://ws.session.ejb/ProxyWebService/createNewCustomerEntity/Fault/CustomerAlreadyExistException"),
        @FaultAction(className = GeneralException_Exception.class, value = "http://ws.session.ejb/ProxyWebService/createNewCustomerEntity/Fault/GeneralException")
    })
    public CustomerEntity createNewCustomerEntity(
        @WebParam(name = "c", targetNamespace = "")
        CustomerEntity c)
        throws CustomerAlreadyExistException_Exception, GeneralException_Exception
    ;

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns ws.client.CustomerEntity
     * @throws CustomerNotFoundException_Exception
     * @throws IncorrectPasswordException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "customerLogin", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CustomerLogin")
    @ResponseWrapper(localName = "customerLoginResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CustomerLoginResponse")
    @Action(input = "http://ws.session.ejb/ProxyWebService/customerLoginRequest", output = "http://ws.session.ejb/ProxyWebService/customerLoginResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/ProxyWebService/customerLogin/Fault/CustomerNotFoundException"),
        @FaultAction(className = IncorrectPasswordException_Exception.class, value = "http://ws.session.ejb/ProxyWebService/customerLogin/Fault/IncorrectPasswordException")
    })
    public CustomerEntity customerLogin(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws CustomerNotFoundException_Exception, IncorrectPasswordException_Exception
    ;

    /**
     * 
     * @param id
     * @return
     *     returns ws.client.AuctionEntity
     * @throws AuctionNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewAuctionListDetails", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewAuctionListDetails")
    @ResponseWrapper(localName = "viewAuctionListDetailsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewAuctionListDetailsResponse")
    @Action(input = "http://ws.session.ejb/ProxyWebService/viewAuctionListDetailsRequest", output = "http://ws.session.ejb/ProxyWebService/viewAuctionListDetailsResponse", fault = {
        @FaultAction(className = AuctionNotFoundException_Exception.class, value = "http://ws.session.ejb/ProxyWebService/viewAuctionListDetails/Fault/AuctionNotFoundException")
    })
    public AuctionEntity viewAuctionListDetails(
        @WebParam(name = "id", targetNamespace = "")
        Long id)
        throws AuctionNotFoundException_Exception
    ;

    /**
     * 
     * @param id
     * @return
     *     returns java.math.BigDecimal
     * @throws GeneralException_Exception
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewCreditBalance", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewCreditBalance")
    @ResponseWrapper(localName = "viewCreditBalanceResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ViewCreditBalanceResponse")
    @Action(input = "http://ws.session.ejb/ProxyWebService/viewCreditBalanceRequest", output = "http://ws.session.ejb/ProxyWebService/viewCreditBalanceResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/ProxyWebService/viewCreditBalance/Fault/CustomerNotFoundException"),
        @FaultAction(className = GeneralException_Exception.class, value = "http://ws.session.ejb/ProxyWebService/viewCreditBalance/Fault/GeneralException")
    })
    public BigDecimal viewCreditBalance(
        @WebParam(name = "id", targetNamespace = "")
        Long id)
        throws CustomerNotFoundException_Exception, GeneralException_Exception
    ;

}
